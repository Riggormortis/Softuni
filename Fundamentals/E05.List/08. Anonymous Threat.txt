using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

public class Program
{
    public static void Main()
    {
        List<string> words = Console.ReadLine()
            .Split(' ', StringSplitOptions.RemoveEmptyEntries)
            .ToList();

        string command = Console.ReadLine();
        while (command != "3:1")
        {
            string[] cmdArgs = command
               .Split(' ', StringSplitOptions.RemoveEmptyEntries)
                .ToArray();
            string cmdType = cmdArgs[0];

            if (cmdType == "merge")
            {
                int startIndex = int.Parse(cmdArgs[1]);
                int endIndex = int.Parse(cmdArgs[2]);

                Merge(words, startIndex, endIndex);
            }

            else if (cmdType == "divide")
            {
                int index = int.Parse(cmdArgs[1]);
                int partitionsCount = int.Parse(cmdArgs[2]);

                Divide(words, index, partitionsCount);
            }

            command = Console.ReadLine();
        }

        Console.WriteLine(String.Join(" ", words));
        
    }

    static void Merge(List<string> words, int startIndex, int endIndex)
    {
        if (!IsIndexValid(words, startIndex))
        {
            startIndex = 0;
        }
        if (!IsIndexValid(words, endIndex))
        {
            endIndex = words.Count - 1;
        }

        //bez StringBuilder - zakomentiranoto
        //List<string> mergedList = new List<string>();
        StringBuilder merged = new StringBuilder();
        for (int i = startIndex; i <= endIndex; i++)
        {


            //mergedList.Add(words[startIndex]);
            merged.Append(words[startIndex]); //<= Fast concatenation 
            words.RemoveAt(startIndex);
        }
        //string merged = String.Join("", mergedList);
        //words.Insert(startIndex, merged);

        words.Insert(startIndex, merged.ToString()); 
                       
    }
   
    static void Divide(List<string> words, int elementIndex, int partitionsCount)
    {
        //no need to validate - always will be valid
        string word = words[elementIndex];

        if (partitionsCount > word.Length)
        {
            //I will not do anything
            return;
        }
        //perfect division - >
        int partitionsLenght = word.Length / partitionsCount;
        int partitionsReminder = word.Length % partitionsCount;
        int LastPartitionLenght = partitionsCount + partitionsReminder;

        List<string> partitions = new List<string>();
        for (int i = 0; i < partitionsCount; i++)
        {
            char[] currentPartition;
            if (i == partitionsCount)
            {
                //last iteration
                //last partition is bigger
                currentPartition = word
                    .Skip(i * partitionsLenght)
                    .Take(LastPartitionLenght)
                    .ToArray();
               
            }
            else
            {
                //equal partitions
                currentPartition = word
                    .Skip(i * partitionsLenght)
                    .Take(partitionsLenght)
                    .ToArray();
            }
            partitions.Add(new string (currentPartition));
        }
        //first remove the whole element
        words.RemoveAt(elementIndex);
        //at the same index we append the collection of partitions
        words.InsertRange(elementIndex, partitions);
    }
    static bool IsIndexValid(List<string> words, int index)
    {
        return index >= 0 && index < words.Count;
    }
}
